{"version":3,"sources":["../src/string-ends-with-x.js"],"names":[],"mappings":"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","file":"string-ends-with-x.esm.js","sourcesContent":["import attempt from 'attempt-x';\nimport toInteger from 'to-integer-x';\nimport requireObjectCoercible from 'require-object-coercible-x';\nimport toStr from 'to-string-x';\nimport isRegExp from 'is-regexp-x';\nimport numberIsNaN from 'is-nan-x';\nimport clamp from 'math-clamp-x';\n\nconst ERR_MSG = 'Cannot call method \"endsWith\" with a regex';\nconst {endsWith: ew, charCodeAt} = ERR_MSG;\nconst nativeEndsWith = typeof ew === 'function' && ew;\n\nlet isWorking;\n\nif (nativeEndsWith) {\n  let res = attempt.call('/a/', nativeEndsWith, /a/);\n  isWorking = res.threw;\n\n  if (isWorking) {\n    res = attempt.call('abc', nativeEndsWith, 'c', -1 / 0);\n    isWorking = res.threw === false && res.value === false;\n  }\n\n  if (isWorking) {\n    res = attempt.call(123, nativeEndsWith, '3');\n    isWorking = res.threw === false && res.value === true;\n  }\n\n  if (isWorking) {\n    res = attempt.call(null, nativeEndsWith, 'n');\n    isWorking = res.threw;\n  }\n}\n\n/**\n * The endsWith method determines whether a string ends with the characters of a specified string, returning true or\n * false as appropriate.\n *\n * @param {string} string - The string to search.\n * @throws {TypeError} If string is null or undefined.\n * @param {string} searchString - The characters to be searched for at the end of this string.\n * @throws {TypeError} If searchString is a RegExp.\n * @param {number} [length] - If provided it is used as the length of string. If omitted, the default value is the string length.\n * @returns {boolean} - `true` if the given characters are found at the end of the string; otherwise, `false`.\n */\nlet $endsWith;\n\nif (isWorking) {\n  $endsWith = function endsWith(string, searchString) {\n    const str = toStr(requireObjectCoercible(string));\n\n    if (isRegExp(searchString)) {\n      throw new TypeError(ERR_MSG);\n    }\n\n    const args = [searchString];\n\n    if (arguments.length > 2) {\n      /* eslint-disable-next-line prefer-rest-params,prefer-destructuring */\n      args[1] = arguments[2];\n    }\n\n    return nativeEndsWith.apply(str, args);\n  };\n} else {\n  // Firefox (< 37?) and IE 11 TP have a noncompliant startsWith implementation\n  $endsWith = function endsWith(string, searchString) {\n    const str = toStr(requireObjectCoercible(string));\n\n    if (isRegExp(searchString)) {\n      throw new TypeError(ERR_MSG);\n    }\n\n    const stringLength = str.length;\n    const searchStr = toStr(searchString);\n    const searchLength = searchStr.length;\n    let length = stringLength;\n\n    if (arguments.length > 2) {\n      /* eslint-disable-next-line prefer-rest-params */\n      const position = arguments[2];\n\n      if (typeof position !== 'undefined') {\n        length = toInteger(position);\n\n        if (numberIsNaN(length)) {\n          length = 0;\n        }\n      }\n    }\n\n    const end = clamp(length, 0, stringLength);\n    const start = end - searchLength;\n\n    if (start < 0) {\n      return false;\n    }\n\n    let index = 0;\n    while (index < searchLength) {\n      if (charCodeAt.call(str, start + index) !== charCodeAt.call(searchStr, index)) {\n        return false;\n      }\n\n      index += 1;\n    }\n\n    return true;\n  };\n}\n\nconst sew = $endsWith;\n\nexport default sew;\n"]}