{"version":3,"sources":["../src/string-ends-with-x.js"],"names":[],"mappings":"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","file":"string-ends-with-x.esm.js","sourcesContent":["import attempt from 'attempt-x';\nimport toInteger from 'to-integer-x';\nimport requireObjectCoercible from 'require-object-coercible-x';\nimport toStr from 'to-string-x';\nimport isRegExp from 'is-regexp-x';\nimport numberIsNaN from 'is-nan-x';\nimport clamp from 'math-clamp-x';\nimport toBoolean from 'to-boolean-x';\n\nconst ERR_MSG = 'Cannot call method \"endsWith\" with a regex';\nconst {endsWith: ew, charCodeAt} = ERR_MSG;\nconst nativeEndsWith = typeof ew === 'function' && ew;\n\nconst test1 = function test1() {\n  return attempt.call('/a/', nativeEndsWith, /a/).threw;\n};\n\nconst test2 = function test2() {\n  const res = attempt.call('abc', nativeEndsWith, 'c', -1 / 0);\n\n  return res.threw === false && res.value === false;\n};\n\nconst test3 = function test3() {\n  const res = attempt.call(123, nativeEndsWith, '3');\n\n  return res.threw === false && res.value === true;\n};\n\nconst test4 = function test4() {\n  return attempt.call(null, nativeEndsWith, 'n').threw;\n};\n\nconst isWorking = toBoolean(nativeEndsWith) && test1() && test2() && test3() && test4();\n\nconst patchedEndsWith = function patchedEndsWith() {\n  return function endsWith(string, searchString) {\n    const str = toStr(requireObjectCoercible(string));\n\n    if (isRegExp(searchString)) {\n      throw new TypeError(ERR_MSG);\n    }\n\n    const args = [searchString];\n\n    if (arguments.length > 2) {\n      /* eslint-disable-next-line prefer-rest-params,prefer-destructuring */\n      args[1] = arguments[2];\n    }\n\n    return nativeEndsWith.apply(str, args);\n  };\n};\n\nconst assertNotRegexp = function assertNotRegexp(searchString) {\n  if (isRegExp(searchString)) {\n    throw new TypeError(ERR_MSG);\n  }\n\n  return searchString;\n};\n\nconst getLength = function getLength(args, stringLength) {\n  let length = stringLength;\n\n  if (args.length > 2) {\n    const position = args[2];\n\n    if (typeof position !== 'undefined') {\n      length = toInteger(position);\n\n      if (numberIsNaN(length)) {\n        length = 0;\n      }\n    }\n  }\n\n  return length;\n};\n\nconst predicate = function predicate(obj) {\n  const {str, searchStr, start, searchLength} = obj;\n\n  if (start < 0) {\n    return false;\n  }\n\n  let index = 0;\n  while (index < searchLength) {\n    if (charCodeAt.call(str, start + index) !== charCodeAt.call(searchStr, index)) {\n      return false;\n    }\n\n    index += 1;\n  }\n\n  return true;\n};\n\nexport const implementation = function implementation() {\n  // Firefox (< 37?) and IE 11 TP have a non-compliant startsWith implementation\n  return function endsWith(string, searchString) {\n    const str = toStr(requireObjectCoercible(string));\n\n    assertNotRegexp(searchString);\n\n    const stringLength = str.length;\n    const searchStr = toStr(searchString);\n    const searchLength = searchStr.length;\n    /* eslint-disable-next-line prefer-rest-params */\n    const length = getLength(arguments, stringLength);\n    const end = clamp(length, 0, stringLength);\n    const start = end - searchLength;\n\n    return predicate({str, searchStr, start, searchLength});\n  };\n};\n\n/**\n * The endsWith method determines whether a string ends with the characters of a specified string, returning true or\n * false as appropriate.\n *\n * @param {string} string - The string to search.\n * @throws {TypeError} If string is null or undefined.\n * @param {string} searchString - The characters to be searched for at the end of this string.\n * @throws {TypeError} If searchString is a RegExp.\n * @param {number} [length] - If provided it is used as the length of string. If omitted, the default value is the string length.\n * @returns {boolean} - `true` if the given characters are found at the end of the string; otherwise, `false`.\n */\nconst $endsWith = isWorking ? patchedEndsWith() : implementation();\n\nexport default $endsWith;\n"]}